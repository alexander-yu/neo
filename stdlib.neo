void check(bool cond, string err) {
    if (!cond) {
        die(err);
    }
}

matrix<int> itranspose(matrix<int> mat) {
    auto r = rows(mat);
    auto c = cols(mat);

    create matrix<int> res[c][r];

    for (auto i = 0; i < c; i++) {
        for (auto j = 0; j < r; j++) {
            res[i, j] = mat[j, i];
        }
    }

    return res;
}

matrix<float> ftranspose(matrix<float> mat) {
    auto r = rows(mat);
    auto c = cols(mat);

    create matrix<float> res[c][r];

    for (auto i = 0; i < c; i++) {
        for (auto j = 0; j < r; j++) {
            res[i, j] = mat[j, i];
        }
    }

    return res;
}

int iabs(int x) {
    if (x >= 0) {
        return x;
    } else {
        return -x;
    }
}

float fabs(float x) {
    if (x >= 0.) {
        return x;
    } else {
        return -x;
    }
}

int imax(int a, int b) {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}

float fmax(float a, float b) {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}

int imin(int a, int b) {
    if (a > b) {
        return b;
    } else {
        return a;
    }
}

float fmin(float a, float b) {
    if (a > b) {
        return b;
    } else {
        return a;
    }
}

void iswap_rows(matrix<int> m, int i1, int i2) {
    /* Check rows are in-bounds */
    check(i1 >= 0 && i1 < rows(m), "Matrix index error: attempted to swap an out of bounds row");
    check(i2 >= 0 && i2 < rows(m), "Matrix index error: attempted to swap an out of bounds row");

    for (auto j = 0; j < cols(m); j++) {
        auto temp = m[i1, j];
        m[i1, j] = m[i2, j];
        m[i2, j] = temp;
    }
}

void fswap_rows(matrix<float> m, int i1, int i2) {
    /* Check rows are in-bounds */
    check(i1 >= 0 && i1 < rows(m), "Matrix index error: attempted to swap an out of bounds row");
    check(i2 >= 0 && i2 < rows(m), "Matrix index error: attempted to swap an out of bounds row");

    for (auto j = 0; j < cols(m); j++) {
        auto temp = m[i1, j];
        m[i1, j] = m[i2, j];
        m[i2, j] = temp;
    }
}

void iswap_cols(matrix<int> m, int j1, int j2) {
    /* Check columns are in-bounds */
    check(j1 >= 0 && j1 < cols(m), "Matrix index error: attempted to swap an out of bounds column");
    check(j2 >= 0 && j2 < cols(m), "Matrix index error: attempted to swap an out of bounds column");

    for (auto i = 0; i < rows(m); i++) {
        auto temp = m[i, j1];
        m[i, j1] = m[i, j2];
        m[i, j2] = temp;
    }
}

void fswap_cols(matrix<float> m, int j1, int j2) {
    /* Check columns are in-bounds */
    check(j1 >= 0 && j1 < cols(m), "Matrix index error: attempted to swap an out of bounds column");
    check(j2 >= 0 && j2 < cols(m), "Matrix index error: attempted to swap an out of bounds column");

    for (auto i = 0; i < rows(m); i++) {
        auto temp = m[i, j1];
        m[i, j1] = m[i, j2];
        m[i, j2] = temp;
    }
}

matrix<int> ieye(int n) {
    check(n > 0, "Dimension error: identity matrix must have positive dimensions");

    create matrix<int> m[n][n];
    for (auto i = 0; i < n; i++) {
        m[i, i] = 1;
    }
    return m;
}

matrix<float> feye(int n) {
    check(n > 0, "Dimension error: identity matrix must have positive dimensions");

    create matrix<float> m[n][n];
    for (auto i = 0; i < n; i++) {
        m[i, i] = 1.;
    }
    return m;
}

array<matrix<float>> pivot(matrix<float> m) {
    /* Check m is square */
    check(rows(m) == cols(m), "Dimension error: attempted to get pivot permutation matrix of non-square matrix");

    auto n = rows(m);
    auto sign = 1.;

    auto res = feye(n);

    for (auto j = 0; j < n; j++) {
        auto max_row_i = j;
        for (auto i = j; i < n; i++) {
            if (fabs(m[i, j]) > fabs(m[max_row_i, j])) {
                max_row_i = i;
            }
        }
        if (j != max_row_i) {
            sign *= -1.;
            fswap_rows(res, max_row_i, j);
        }
    }

    return {| res, [[sign]] |};
}

array<matrix<float>> lu_factor(matrix<float> m) {
    /* Check m is square */
    check(rows(m) == cols(m), "Dimension error: attempted to perform LU decomposition on a non-square matrix");

    auto n = rows(m);
    auto pivot_res = pivot(m);
    auto pivot = pivot_res[0];
    auto pivot_sign = pivot_res[1];
    free(pivot_res);

    auto pm = pivot @ m;
    auto l = feye(n);
    create matrix<float> u[n][n];
    for (auto j = 0; j < n; j++) {
        for (auto i = 0; i <= j; i++) {
            auto sum = 0.;
            for (auto k = 0; k < i; k++) {
                sum += l[i, k] * u[k, j];
            }
            u[i, j] = pm[i, j] - sum;
        }

        for (auto i = j; i < n; i++) {
            auto sum = 0.;
            for (auto k = 0; k < j; k++) {
                sum += l[i, k] * u[k, j];
            }

            if (u[j, j] == 0.) {
                /* In this case, the matrix is singular, meaning there is not a unique
                 * decomposition; set l_ij to an arbitrary value */
                l[i, j] = 1.;
            } else {
                l[i, j] = (pm[i, j] - sum) / u[j, j];
            }
        }
    }

    free(pm);
    return {| pivot, pivot_sign, l, u |};
}

matrix<float> lu_solve(matrix<float> l, matrix<float> u, matrix<float> b) {
    /* Check l and u are square */
    check(rows(l) == cols(l), "Dimension error: lu_solve requires l to be square");
    check(rows(u) == cols(u), "Dimension error: lu_solve requires u to be square");
    check(rows(l) == rows(u), "Dimension error: lu_solve requires l and u to have the same rows");
    check(cols(l) == cols(u), "Dimension error: lu_solve requires l and u to have the same cols");
    /* Check that b has compatible dimensions */
    check(rows(l) == rows(b), "Dimension error: lu_solve requires l and b to have the same rows");

    auto n = rows(l);

    /* We first solve ly = b */
    create matrix<float> y[n][cols(b)];
    for (auto i = 0; i < n; i++) {
        create matrix<float> sum[1][cols(b)];
        for (auto j = 0; j < i; j++) {
            sum += l[i, j] * y[j];
        }
        y[i] = b[i] - sum;
        free(sum);
    }

    /* Next, we solve ux = y */
    create matrix<float> x[n][cols(y)];
    for (auto i = n - 1; i >= 0; i--) {
        create matrix<float> sum[1][cols(y)];
        for (auto j = n - 1; j > i; j--) {
            sum += u[i, j] * x[j];
        }
        x[i] = (y[i] - sum) / u[i, i];
        free(sum);
    }

    free(y);
    return x;
}

float det(matrix<float> m) {
    /* Check m is square */
    check(rows(m) == cols(m), "Dimension error: attempted to get determinant of non-square matrix");

    auto n = rows(m);

    auto lu_result = lu_factor(m);
    /* We only need the pivot's determinant */
    auto pivot_sign = lu_result[1];
    /* We don't need l, as its determinant is 1 */
    auto u = lu_result[3];

    auto u_det = 1.;

    for (auto i = 0; i < n; i++) {
        u_det *= u[i, i];
    }

    auto det = pivot_sign[0, 0] * u_det;

    deep_free(lu_result);
    return det;
}

matrix<float> inv(matrix<float> m) {
    /* Check m is square */
    check(rows(m) == cols(m), "Dimension error: attempted to invert non-square matrix");

    auto n = rows(m);

    auto lu_result = lu_factor(m);
    auto pivot = lu_result[0];
    auto pivot_sign = lu_result[1];
    auto l = lu_result[2];
    auto u = lu_result[3];

    auto u_det = 1.;

    for (auto i = 0; i < n; i++) {
        u_det *= u[i, i];
    }

    check(u_det != 0., "Singular matrix error: attempted to invert singular matrix");

    auto id = feye(n);
    auto res = lu_solve(l, u, id);
    res @= pivot;

    deep_free(lu_result);
    free(id);
    return res;
}

matrix<int> imap(func<(int):int> f, matrix<int> m) {
    auto r = rows(m);
    auto c = cols(m);
    create matrix<int> res[r][c];

    for (auto i = 0; i < r; i++) {
        for (auto j = 0; j < c; j++) {
            res[i, j] = f(m[i, j]);
        }
    }

    return res;
}

matrix<float> fmap(func<(float):float> f, matrix<float> m) {
    auto r = rows(m);
    auto c = cols(m);
    create matrix<float> res[r][c];

    for (auto i = 0; i < r; i++) {
        for (auto j = 0; j < c; j++) {
            res[i, j] = f(m[i, j]);
        }
    }

    return res;
}

matrix<int> imap2(func<(int,int):int> f, matrix<int> m1, matrix<int> m2) {
    auto err = "Dimension error: fmap2 requires broadcastable dimensions";
    check(rows(m1) == rows(m2) || imin(rows(m1), rows(m2)) == 1, err);
    check(cols(m1) == cols(m2) || imin(cols(m1), cols(m2)) == 1, err);

    auto r = imax(rows(m1), rows(m2));
    auto c = imax(cols(m1), cols(m2));
    create matrix<int> res[r][c];

    for (auto i = 0; i < r; i++) {
        for (auto j = 0; j < c; j++) {
            auto i1 = imin(rows(m1) - 1, i);
            auto j1 = imin(cols(m1) - 1, j);
            auto i2 = imin(rows(m2) - 1, i);
            auto j2 = imin(cols(m2) - 1, j);
            res[i, j] = f(m1[i1, j1], m2[i2, j2]);
        }
    }

    return res;
}

matrix<float> fmap2(func<(float,float):float> f, matrix<float> m1, matrix<float> m2) {
    auto err = "Dimension error: fmap2 requires broadcastable dimensions";
    check(rows(m1) == rows(m2) || imin(rows(m1), rows(m2)) == 1, err);
    check(cols(m1) == cols(m2) || imin(cols(m1), cols(m2)) == 1, err);

    auto r = imax(rows(m1), rows(m2));
    auto c = imax(cols(m1), cols(m2));
    create matrix<float> res[r][c];

    for (auto i = 0; i < r; i++) {
        for (auto j = 0; j < c; j++) {
            auto i1 = imin(rows(m1) - 1, i);
            auto j1 = imin(cols(m1) - 1, j);
            auto i2 = imin(rows(m2) - 1, i);
            auto j2 = imin(cols(m2) - 1, j);
            res[i, j] = f(m1[i1, j1], m2[i2, j2]);
        }
    }

    return res;
}

matrix<int> iinsert_col(matrix<int> m, int i, matrix<int> col){
    auto dim_err = "Dimension error: attempted to insert/append column with incompatible dimensions";
    check(rows(m) == rows(col), dim_err);
    check(cols(col) == 1, dim_err);
    check(i >= 0 && i <= cols(m), "Matrix index error: attempted to access an out of bounds index");

    auto r = rows(m);
    auto c = cols(m) + 1;
    create matrix<int> res[r][c];

    if (i > 0) {
        res[:, :i] = m[:, :i];
    }

    res[:, i] = col;

    if (i + 1 < c) {
        res[:, (i + 1):] = m[:, i:];
    }

    return res;
}

matrix<float> finsert_col(matrix<float> m, int i, matrix<float> col){
    auto dim_err = "Dimension error: attempted to insert/append column with incompatible dimensions";
    check(rows(m) == rows(col), dim_err);
    check(cols(col) == 1, dim_err);
    check(i >= 0 && i <= cols(m), "Matrix index error: attempted to access an out of bounds index");

    auto r = rows(m);
    auto c = cols(m) + 1;
    create matrix<float> res[r][c];

    if (i > 0) {
        res[:, :i] = m[:, :i];
    }

    res[:, i] = col;

    if (i + 1 < c) {
        res[:, (i + 1):] = m[:, i:];
    }

    return res;
}

matrix<int> idelete_col(matrix<int> m, int i){
    check(i >= 0 && i < cols(m), "Matrix index error: attempted to access an out of bounds index");

    auto r = rows(m);
    auto c = cols(m) - 1;
    create matrix<int> res[r][c];

    if (i > 0) {
        res[:, :i] = m[:, :i];
    }

    if (i < c) {
        res[:, i:] = m[:, (i + 1):];
    }

    return res;
}

matrix<float> fdelete_col(matrix<float> m, int i){
    check(i >= 0 && i < cols(m), "Matrix index error: attempted to access an out of bounds index");

    auto r = rows(m);
    auto c = cols(m) - 1;
    create matrix<float> res[r][c];

    if (i > 0) {
        res[:, :i] = m[:, :i];
    }

    if (i < c) {
        res[:, i:] = m[:, (i + 1):];
    }

    return res;
}

matrix<int> iappend_col(matrix<int> m, matrix<int> col){
    return iinsert_col(m, cols(m), col);
}

matrix<float> fappend_col(matrix<float> m, matrix<float> col){
    return finsert_col(m, cols(m), col);
}

matrix<int> ihstack(matrix<int> m1, matrix<int> m2){
    check(rows(m1) == rows(m2), "Dimension error: attempted to hstack matrices with incompatible dimensions");

    auto r = rows(m1);
    auto c1 = cols(m1);
    auto c2 = cols(m2);
    create matrix<int> res[r][c1 + c2];

    res[:, :c1] = m1;
    res[:, c1:] = m2;

    return res;
}

matrix<float> fhstack(matrix<float> m1, matrix<float> m2){
    check(rows(m1) == rows(m2), "Dimension error: attempted to hstack matrices with incompatible dimensions");

    auto r = rows(m1);
    auto c1 = cols(m1);
    auto c2 = cols(m2);
    create matrix<float> res[r][c1 + c2];

    res[:, :c1] = m1;
    res[:, c1:] = m2;

    return res;
}

matrix<int> ivstack(matrix<int> m1, matrix<int> m2){
    check(cols(m1) == cols(m2), "Dimension error: attempted to vstack matrices with incompatible dimensions");

    auto r1 = rows(m1);
    auto r2 = rows(m2);
    auto c = cols(m1);
    create matrix<int> res[r1 + r2][c];

    res[:r1, :] = m1;
    res[r1:, :] = m2;

    return res;
}

matrix<float> fvstack(matrix<float> m1, matrix<float> m2){
    check(cols(m1) == cols(m2), "Dimension error: attempted to vstack matrices with incompatible dimensions");

    auto r1 = rows(m1);
    auto r2 = rows(m2);
    auto c = cols(m1);
    create matrix<float> res[r1 + r2][c];

    res[:r1, :] = m1;
    res[r1:, :] = m2;

    return res;
}

matrix<int> isum(matrix<int> m, int axis) {
    check(axis == 0 || axis == 1, "Axis error: isum provided an axis that is neither 0 nor 1");

    auto r = rows(m);
    auto c = cols(m);

    if (axis == 0) {
        create matrix<int> sum[1][c];

        for (auto i = 0; i < r; i++) {
            sum += m[i];
        }

        return sum;
    } else {
        create matrix<int> sum[r][1];

        for (auto i = 0; i < c; i++) {
            sum += m[:, i];
        }

        return sum;
    }
}


matrix<float> fsum(matrix<float> m, int axis) {
    check(axis == 0 || axis == 1, "Axis error: fsum provided an axis that is neither 0 nor 1");

    auto r = rows(m);
    auto c = cols(m);

    if (axis == 0) {
        create matrix<float> sum[1][c];

        for (auto i = 0; i < r; i++) {
            sum += m[i];
        }

        return sum;
    } else {
        create matrix<float> sum[r][1];

        for (auto i = 0; i < c; i++) {
            sum += m[:, i];
        }

        return sum;
    }
}

matrix<float> mean(matrix<float> m, int axis) {
    check(axis == 0 || axis == 1, "Axis error: mean provided an axis that is neither 0 nor 1");

    auto sum = fsum(m, axis);

    if (axis == 0) {
        sum /= to_float(rows(m));
    } else {
        sum /= to_float(cols(m));
    }

    return sum;
}

matrix<float> std(matrix<float> m, int axis) {
    check(axis == 0 || axis == 1, "Axis error: std provided an axis that is neither 0 nor 1");

    auto mu = mean(m, axis);
    auto squared_residuals = (m - mu) ^ 2.;
    auto sum = fsum(squared_residuals, axis);

    if (axis == 0) {
        sum /= to_float(rows(m) - 1);
    } else {
        sum /= to_float(cols(m) - 1);
    }

    sum ^= 0.5;

    free(mu);
    free(squared_residuals);
    return sum;
}
